{"version":3,"sources":["utils/data.ts","utils/index.ts","components/error_handling.tsx","components/loader.tsx","components/index.tsx","App.tsx","serviceWorker.ts","index.tsx","utils/css.ts"],"names":["useData","useState","data","setData","useEffect","a","axios","get","ErrorHandler","props","state","error","this","setState","children","Component","ldsFacebook","keyframes","LdsFacebook","styled","div","LoaderMain","Loader","Container","lazy","GlobalStyle","Navbar","Banner","Duration","Register","Detail","Condition","BottomBanner","BottomLogos","TopFooter","BottomFooter","App","fallback","navbarItems","duration","detail","condition","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","browserSizes","laptop","largeTablet","tablet","largePhone","mobile","browserQueryRule","Object","keys","reduce","acc","cV","mediaQuery","currentSize"],"mappings":"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","file":"static/js/main.f13a56f3.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport { Data } from '../react-app-env'\n\nexport function useData(): Data | undefined {\n  const [data, setData] = useState<Data>()\n\n  useEffect(() => {\n    ;(async () => {\n      const { data } = await axios.get<Data>(`https://panjs.com/ywc.json`)\n      setData(data)\n    })()\n  }, [])\n\n  return data\n}\n","import { browserSizes, browserQueryRule } from './css'\nimport { useData } from './data'\n\nexport { browserSizes, browserQueryRule, useData }\n","import React, { Component } from 'react'\n\ninterface ErrorProps {\n  error: boolean\n}\n\nexport class ErrorHandler extends Component<{}, ErrorProps> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      error: false,\n    }\n  }\n\n  componentDidCatch(error: any) {\n    this.setState({ error: !this.state.error })\n  }\n\n  render() {\n    if (this.state.error) {\n      return <div>400: CLient Error. Please try again later.</div>\n    }\n\n    return this.props.children\n  }\n}\n","import React from 'react'\nimport { keyframes } from '@emotion/core'\nimport styled from '@emotion/styled'\n\nconst ldsFacebook = keyframes`\n  0% {\n    top: 6px;\n    height: 51px;\n  }\n  50%, 100% {\n    top: 19px;\n    height: 26px;\n  }\n`\n\nconst LdsFacebook = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 64px;\n  height: 64px;\n\n  div {\n    display: inline-block;\n    position: absolute;\n    left: 6px;\n    width: 13px;\n    background: #fbba32;\n    animation: ${ldsFacebook} 1.2s cubic-bezier(0, 0.5, 0.5, 1) infinite;\n\n    :nth-of-type(1) {\n      left: 6px;\n      animation-delay: -0.24s;\n    }\n\n    :nth-of-type(2) {\n      left: 26px;\n      animation-delay: -0.12s;\n    }\n\n    :nth-of-type(3) {\n      left: 45px;\n      animation-delay: 0;\n    }\n  }\n`\n\nconst LoaderMain = styled.div`\n  margin: auto;\n`\n\nexport const Loader: React.FC = () => {\n  return (\n    <LoaderMain>\n      <LdsFacebook />\n    </LoaderMain>\n  )\n}\n","import { lazy } from 'react'\n\nimport { ErrorHandler } from './error_handling'\nimport { Loader } from './loader'\n\nconst Container = lazy(() => import('./container'))\nconst GlobalStyle = lazy(() => import('./global'))\nconst Navbar = lazy(() => import('./navbar'))\nconst Banner = lazy(() => import('./banner'))\nconst Duration = lazy(() => import('./duration'))\nconst Register = lazy(() => import('./register'))\nconst Detail = lazy(() => import('./detail'))\nconst Condition = lazy(() => import('./condition'))\nconst BottomBanner = lazy(() => import('./bottom_banner'))\nconst BottomLogos = lazy(() => import('./bottom_logos'))\nconst TopFooter = lazy(() => import('./top_footer'))\nconst BottomFooter = lazy(() => import('./bottom_footer'))\n\nexport {\n  Container,\n  GlobalStyle,\n  Navbar,\n  Banner,\n  Duration,\n  Register,\n  Detail,\n  Condition,\n  BottomBanner,\n  BottomLogos,\n  TopFooter,\n  BottomFooter,\n  ErrorHandler,\n  Loader,\n}\n","import React, { Suspense } from 'react'\n\nimport {\n  Container,\n  GlobalStyle,\n  Navbar,\n  Banner,\n  Duration,\n  Register,\n  Detail,\n  Condition,\n  BottomBanner,\n  BottomLogos,\n  TopFooter,\n  BottomFooter,\n  ErrorHandler,\n  Loader,\n} from './components'\nimport { useData } from './utils'\n\nconst App: React.FC = () => {\n  const data = useData()\n\n  if (data) {\n    return (\n      <>\n        <ErrorHandler>\n          <Suspense fallback={<Loader />}>\n            <Navbar navbarItems={data.navbarItems} />\n            <Banner />\n            <Container>\n              <Duration duration={data.duration} />\n            </Container>\n            <Register />\n            <Container>\n              <Detail detail={data.detail} />\n              <Condition condition={data.condition} />\n              <BottomBanner />\n              <BottomLogos />\n            </Container>\n            <TopFooter />\n            <BottomFooter />\n            <GlobalStyle />\n          </Suspense>\n        </ErrorHandler>\n      </>\n    )\n  }\n\n  return <Loader />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","// must define the index signature\nimport { BrowserSize, MediaQuery, BrowserQuery } from '../react-app-env'\n\nexport const browserSizes: BrowserSize = {\n  laptop: 1200,\n  largeTablet: 992,\n  tablet: 768,\n  largePhone: 578,\n  mobile: 320,\n}\n\nexport const browserQueryRule = Object.keys(browserSizes).reduce((acc, cV) => {\n  // create empty object\n  const mediaQuery: MediaQuery = {}\n\n  // get current size\n  const currentSize = browserSizes[cV]\n\n  // map current size with @media query string\n  mediaQuery[cV] = `@media screen and (min-width: ${currentSize}px)`\n\n  // return new accumurator\n  return { ...acc, ...mediaQuery }\n}, {}) as BrowserQuery\n"],"sourceRoot":""}