{"version":3,"sources":["utils/css.ts","components/container.tsx","components/global.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["browserSizes","laptop","tablet","mobile","browserQueryRule","Object","keys","reduce","acc","cV","mediaQuery","currentSize","ContainerMain","styled","div","Container","props","children","globalStyle","css","GlobalStyle","styles","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2bAGO,IAAMA,EAA4B,CACvCC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KAGGC,EAAmBC,OAAOC,KAAKN,GAAcO,QAAO,SAACC,EAAKC,GAErE,IAAMC,EAAyB,GAGzBC,EAAcX,EAAaS,GAMjC,OAHAC,EAAWD,GAAX,wCAAkDE,EAAlD,O,yVAGO,CAAP,GAAYH,EAAZ,GAAoBE,KACnB,I,0GChBH,IAAME,EAAgBC,IAAOC,IAAV,IACfV,EAAiBD,QAKRY,EAAsB,SAAAC,GACjC,OAAO,kBAACJ,EAAD,KAAgBI,EAAMC,W,obCT/B,IAAMC,EAAcC,YAAH,KAqBJC,EAAwB,kBAAM,kBAAC,IAAD,CAAQC,OAAQH,KCX5CI,EATO,WACpB,OACE,oCACE,kBAAC,EAAD,qBACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1ba989eb.chunk.js","sourcesContent":["// must define the index signature\nimport { BrowserSize, MediaQuery, BrowserQuery } from '../react-app-env'\n\nexport const browserSizes: BrowserSize = {\n  laptop: 1024,\n  tablet: 768,\n  mobile: 320,\n}\n\nexport const browserQueryRule = Object.keys(browserSizes).reduce((acc, cV) => {\n  // create empty object\n  const mediaQuery: MediaQuery = {}\n\n  // get current size\n  const currentSize = browserSizes[cV]\n\n  // map current size with @media query string\n  mediaQuery[cV] = `@media screen and (min-width: ${currentSize}px)`\n\n  // return new accumurator\n  return { ...acc, ...mediaQuery }\n}, {}) as BrowserQuery\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport { browserQueryRule } from '../utils'\n\nconst ContainerMain = styled.div`\n  ${browserQueryRule.mobile} {\n    margin: 0 50px;\n  }\n`\n\nexport const Container: React.FC = props => {\n  return <ContainerMain>{props.children}</ContainerMain>\n}\n","import React from 'react'\nimport { css, Global } from '@emotion/core'\n\nconst globalStyle = css`\n  @font-face {\n    font-family: 'TATSanaSuksa';\n    src: url(./fonts/TATSanaSuksa-Regular.woff2);\n    font-weight: normal;\n  }\n\n  @font-face {\n    font-family: 'TATSanaSuksa';\n    src: url(./fonts/TATSanaChon-Bold.woff2);\n    font-weight: bold;\n  }\n\n  html,\n  body {\n    margin: 0;\n    font-size: 16px;\n    font-family: 'TATSanaSuksa';\n  }\n`\n\nexport const GlobalStyle: React.FC = () => <Global styles={globalStyle} />\n","import React from 'react'\n\nimport { Container, GlobalStyle } from './components'\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Container>Hello world!</Container>\n      <GlobalStyle />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}